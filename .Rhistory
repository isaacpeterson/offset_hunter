sum(direct_impacts_list$threat_intensity)
direct_impacts_list$impact_fraction = direct_impacts_list$threat_intensity/sum(direct_impacts_list$threat_intensity)
direct_impacts_list
graphics.off()
pdf(file = '~/GitHub/mrio_bio_satellite/homogenised_alluvial.pdf', height = 11, width = 8.5)
alluvial::alluvial( select(data_to_use, "production_industry", "finalsale_industry"),
#                    hide = data_to_use$threat_intensity < quantile(data_to_use$threat_intensity, .9),
freq=data_to_use$threat_intensity,
border=NA,
blocks = TRUE,
#                    col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
graphics.off()
source('~/GitHub/offset_hunter/run_offset_simulation_hunter.R', echo=TRUE)
setwd('~/GitHub/offset_hunter/')
source('~/GitHub/offset_hunter/run_offset_simulation_hunter.R', echo=TRUE)
source('~/GitHub/offset_hunter/run_offset_simulation_hunter.R', echo=TRUE)
source('~/GitHub/offset_hunter/run_offset_simulation_hunter.R', echo=TRUE)
pool_vals
summary(pool_vals)
summary(pool_vals)
summary(pool_vals)
source('~/GitHub/mrio_bio_satellite/code/build_alluvial.R', echo=TRUE)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .99))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
## load libraries
library(tidyr)
library("dplyr")
library("ggplot2")
library("alluvial")
library("ggforce")
library("ggalluvial")
library("ggparallel")
options(stringsAsFactors = FALSE)
country_exclusion_discriminator = 0
country_group_names = c("G7","G5", "G20", "G20_EU", "EUROPEAN_UNION", "EUROPE", "CENTRAL_AMERICA", "SOUTH_AMERICA", "CARIBBEAN", "North_America", "ASIA", "OCEANIA", "AFRICA", "MIDDLE_EAST")
country_group_colour = data.frame(country_group = country_group_names,
country_colour = c(rep('darkblue', 4), rep( "#FF7F0EFF", 2), rep("#D62728FF" , 2), rep("#1F77B4FF", 2),  "#EFC000FF", "#17BECFFF", "#2CA02CFF", "#9467BDFF" ))
# darkblue "#1F77B4FF"
# darkgreen "#2CA02CFF"
# darkred "#D62728FF"
# orange "#FF7F0EFF"
# lightblue "#AEC7E8FF"
# aquamarine "#17BECFFF"
# gold "#EFC000FF" "#FFCC00FF"
# yellow "#FFFF00FF"
#"#8491B4FF"
data_list = list()
#data_list$consumption_finalsale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_full_country_to_country_scale_un.csv')
data_list$consumption_finalsale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_international_country_to_country_scale_un.csv')
data_list$country_scale_consumption = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_total_country_scale_consumption.csv')
data_list$country_scale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_total_country_scale_production.csv')
data_list$homogenised_global = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/homogenised_global_finalsale_level.csv')
data_list$country_group = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/country_groups_updated.csv')
data_list$country_GDP = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/GDP_per_country.csv')
data_list$un_iso_codes = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/un_iso_codes.csv')
footprint_countries = unique(unlist(as.vector(data_list$consumption_finalsale_production[, 1:3])))
data_list$footprint_countries = data.frame(country_name = footprint_countries,
country_index = match(footprint_countries, data_list$un_iso_codes$UN.Country.Name))
countries_to_exclude = data_list$un_iso_codes$UN.Country.Name[unique(c(data_list$country_scale_production$country[which(data_list$country_scale_production$gross_global < country_exclusion_discriminator)],
data_list$country_scale_consumption$country[which(data_list$country_scale_consumption$gross_global < country_exclusion_discriminator)]))]
country_groups = setNames(lapply(seq_along(data_list$country_group), function(i) as.character(data_list$country_group[, i])), names(data_list$country_group))
country_groups = setNames(lapply(seq_along(country_groups), function(i) country_groups[[i]][which(country_groups[[i]] != "")]), names(country_groups))
set_to_modify = which(!(names(country_groups) %in% c('G5', 'G7', 'G20', 'G20_EU')))
country_groups[set_to_modify] = lapply(set_to_modify, function(i) setdiff(country_groups[[i]], c(country_groups$G20, country_groups$G20_EU)))
country_groups$G20  = setdiff(country_groups$G20, c(country_groups$G5, country_groups$G7))
sorted_country_GDP = data_list$country_GDP[order(data_list$country_GDP$GDP, decreasing = TRUE), ]
country_groups = setNames(lapply(seq_along(country_groups), function(i) country_groups[[i]][which((country_groups[[i]] %in% sorted_country_GDP$Country))]), names(country_groups))  #select countries that match data
country_groups = setNames(lapply(seq_along(country_groups), function(i) sorted_country_GDP$Country[sort(match(country_groups[[i]], sorted_country_GDP$Country), decreasing = FALSE)]), names(country_groups))
country_groups_indexes = setNames(lapply(seq_along(country_groups), function(i) match(country_groups[[i]], data_list$footprint_countries$country_name)), names(country_groups))
country_group_order = match(country_group_colour$country_group, names(country_groups))
country_group_order = country_group_order[!(is.na(country_group_order))]
country_groups_df = setNames(lapply(country_group_order, function(i) data.frame(country_name = data_list$footprint_countries$country_name[country_groups_indexes[[i]]],
country_index = data_list$footprint_countries$country_index[country_groups_indexes[[i]]],
country_group = rep(names(country_groups_indexes)[i], length(country_groups_indexes[[i]])))),
country_group_colour$country_group)
country_groups_list = do.call(rbind, country_groups_df)
country_groups_list$country_colour = country_group_colour$country_colour[ match(country_groups_list$country_group, country_group_colour$country_group)]
#countries_to_exclude = c(setdiff(footprint_countries, country_groups_list$country_name))
consumption_finalsale_production_to_use = data_list$consumption_finalsale_production
paths_to_exclude = unlist(lapply(which(names(consumption_finalsale_production_to_use) %in% c("consumption_country", "finalsale_country", "production_country")),
function(i) which(consumption_finalsale_production_to_use[, i] %in% countries_to_exclude)))
if (length(paths_to_exclude) > 0){
consumption_finalsale_production_to_use = consumption_finalsale_production_to_use[-paths_to_exclude, ]
}
consumption_finalsale_production_to_use$country_colour = country_groups_list$country_colour[match(consumption_finalsale_production_to_use$production_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$production_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$production_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$finalsale_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$finalsale_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$consumption_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$consumption_country, country_groups_list$country_name)]
collapsed_set = consumption_finalsale_production_to_use
group_to_aggregate = match(setdiff(names(collapsed_set), c('production_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
group_to_aggregate = match(setdiff(names(collapsed_set), c('finalsale_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
group_to_aggregate = match(setdiff(names(collapsed_set), c('consumption_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
production_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'production_country_group')]), FUN = sum)
production_aggregates$frac = production_aggregates$x/sum(production_aggregates$x) * 100
consumption_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'consumption_country_group')]), FUN = sum)
consumption_aggregates$frac = consumption_aggregates$x/sum(consumption_aggregates$x) * 100
alluvial::alluvial( select(collapsed_set, "production_country_group", "finalsale_country_group", "consumption_country_group"),
freq=collapsed_set$threat_intensity,
border=NA,
blocks = TRUE,
col = collapsed_set$country_colour,
alpha = 0.8,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
collapsed_set
consumption_aggregates
production_aggregates
production_aggregates$frac
sum(production_aggregates$frac)
pie(production_aggregates$frac, labels = production_aggregates$Group.1)
pie(production_aggregates$frac, labels = production_aggregates$Group.1, col = collapsed_set$country_colour)
sum(c( 5.6765657 , 3.1760334 , 3.4819634 , 4.2886256))
## load libraries
library(tidyr)
library("dplyr")
library("ggplot2")
library("alluvial")
library("ggforce")
library("ggalluvial")
library("ggparallel")
options(stringsAsFactors = FALSE)
country_exclusion_discriminator = 0
country_group_names = c("G7","G5", "G20", "G20_EU", "EUROPEAN_UNION", "EUROPE", "CENTRAL_AMERICA", "SOUTH_AMERICA", "CARIBBEAN", "North_America", "ASIA", "OCEANIA", "AFRICA", "MIDDLE_EAST")
country_group_colour = data.frame(country_group = country_group_names,
country_colour = c(rep('darkblue', 4), rep( "#FF7F0EFF", 2), rep("#D62728FF" , 2), rep("#1F77B4FF", 2),  "#EFC000FF", "#17BECFFF", "#2CA02CFF", "#9467BDFF" ))
# darkblue "#1F77B4FF"
# darkgreen "#2CA02CFF"
# darkred "#D62728FF"
# orange "#FF7F0EFF"
# lightblue "#AEC7E8FF"
# aquamarine "#17BECFFF"
# gold "#EFC000FF" "#FFCC00FF"
# yellow "#FFFF00FF"
#"#8491B4FF"
data_list = list()
#data_list$consumption_finalsale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_full_country_to_country_scale_un.csv')
data_list$consumption_finalsale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_international_country_to_country_scale_un.csv')
data_list$country_scale_consumption = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_total_country_scale_consumption.csv')
data_list$country_scale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_total_country_scale_production.csv')
data_list$homogenised_global = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/homogenised_global_finalsale_level.csv')
data_list$country_group = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/country_groups_updated.csv')
data_list$country_GDP = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/GDP_per_country.csv')
data_list$un_iso_codes = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/un_iso_codes.csv')
footprint_countries = unique(unlist(as.vector(data_list$consumption_finalsale_production[, 1:3])))
data_list$footprint_countries = data.frame(country_name = footprint_countries,
country_index = match(footprint_countries, data_list$un_iso_codes$UN.Country.Name))
countries_to_exclude = data_list$un_iso_codes$UN.Country.Name[unique(c(data_list$country_scale_production$country[which(data_list$country_scale_production$gross_global < country_exclusion_discriminator)],
data_list$country_scale_consumption$country[which(data_list$country_scale_consumption$gross_global < country_exclusion_discriminator)]))]
country_groups = setNames(lapply(seq_along(data_list$country_group), function(i) as.character(data_list$country_group[, i])), names(data_list$country_group))
country_groups = setNames(lapply(seq_along(country_groups), function(i) country_groups[[i]][which(country_groups[[i]] != "")]), names(country_groups))
set_to_modify = which(!(names(country_groups) %in% c('G5', 'G7', 'G20', 'G20_EU')))
country_groups[set_to_modify] = lapply(set_to_modify, function(i) setdiff(country_groups[[i]], c(country_groups$G20, country_groups$G20_EU)))
country_groups$G20  = setdiff(country_groups$G20, c(country_groups$G5, country_groups$G7))
sorted_country_GDP = data_list$country_GDP[order(data_list$country_GDP$GDP, decreasing = TRUE), ]
country_groups = setNames(lapply(seq_along(country_groups), function(i) country_groups[[i]][which((country_groups[[i]] %in% sorted_country_GDP$Country))]), names(country_groups))  #select countries that match data
country_groups = setNames(lapply(seq_along(country_groups), function(i) sorted_country_GDP$Country[sort(match(country_groups[[i]], sorted_country_GDP$Country), decreasing = FALSE)]), names(country_groups))
country_groups_indexes = setNames(lapply(seq_along(country_groups), function(i) match(country_groups[[i]], data_list$footprint_countries$country_name)), names(country_groups))
country_group_order = match(country_group_colour$country_group, names(country_groups))
country_group_order = country_group_order[!(is.na(country_group_order))]
country_groups_df = setNames(lapply(country_group_order, function(i) data.frame(country_name = data_list$footprint_countries$country_name[country_groups_indexes[[i]]],
country_index = data_list$footprint_countries$country_index[country_groups_indexes[[i]]],
country_group = rep(names(country_groups_indexes)[i], length(country_groups_indexes[[i]])))),
country_group_colour$country_group)
country_groups_list = do.call(rbind, country_groups_df)
country_groups_list$country_colour = country_group_colour$country_colour[ match(country_groups_list$country_group, country_group_colour$country_group)]
#countries_to_exclude = c(setdiff(footprint_countries, country_groups_list$country_name))
consumption_finalsale_production_to_use = data_list$consumption_finalsale_production
paths_to_exclude = unlist(lapply(which(names(consumption_finalsale_production_to_use) %in% c("consumption_country", "finalsale_country", "production_country")),
function(i) which(consumption_finalsale_production_to_use[, i] %in% countries_to_exclude)))
if (length(paths_to_exclude) > 0){
consumption_finalsale_production_to_use = consumption_finalsale_production_to_use[-paths_to_exclude, ]
}
consumption_finalsale_production_to_use$country_colour = country_groups_list$country_colour[match(consumption_finalsale_production_to_use$production_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$production_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$production_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$finalsale_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$finalsale_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$consumption_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$consumption_country, country_groups_list$country_name)]
collapsed_set = consumption_finalsale_production_to_use
group_to_aggregate = match(setdiff(names(collapsed_set), c('production_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
group_to_aggregate = match(setdiff(names(collapsed_set), c('finalsale_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
group_to_aggregate = match(setdiff(names(collapsed_set), c('consumption_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
production_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'production_country_group')]), FUN = sum)
production_aggregates$frac = production_aggregates$x/sum(production_aggregates$x) * 100
consumption_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'consumption_country_group')]), FUN = sum)
consumption_aggregates$frac = consumption_aggregates$x/sum(consumption_aggregates$x) * 100
alluvial::alluvial( select(collapsed_set, "production_country_group", "finalsale_country_group", "consumption_country_group"),
freq=collapsed_set$threat_intensity,
border=NA,
blocks = TRUE,
col = collapsed_set$country_colour,
alpha = 0.8,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
dd <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .99))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .90))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .90))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
data_to_show
data_list
dim(data_list)
data_list$consumption_finalsale_production
countries_to_exclude
consumption_finalsale_production_to_use
data_to_show
dd <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .5))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
dd <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .95))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
## load libraries
library(tidyr)
library("dplyr")
library("ggplot2")
library("alluvial")
library("ggforce")
library("ggalluvial")
library("ggparallel")
options(stringsAsFactors = FALSE)
country_exclusion_discriminator = 0
country_group_names = c("G7","G5", "G20", "G20_EU", "EUROPEAN_UNION", "EUROPE", "CENTRAL_AMERICA", "SOUTH_AMERICA", "CARIBBEAN", "North_America", "ASIA", "OCEANIA", "AFRICA", "MIDDLE_EAST")
country_group_colour = data.frame(country_group = country_group_names,
country_colour = c(rep('darkblue', 4), rep( "#FF7F0EFF", 2), rep("#D62728FF" , 2), rep("#1F77B4FF", 2),  "#EFC000FF", "#17BECFFF", "#2CA02CFF", "#9467BDFF" ))
# darkblue "#1F77B4FF"
# darkgreen "#2CA02CFF"
# darkred "#D62728FF"
# orange "#FF7F0EFF"
# lightblue "#AEC7E8FF"
# aquamarine "#17BECFFF"
# gold "#EFC000FF" "#FFCC00FF"
# yellow "#FFFF00FF"
#"#8491B4FF"
data_list = list()
#data_list$consumption_finalsale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_full_country_to_country_scale_un.csv')
data_list$consumption_finalsale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_international_country_to_country_scale_un.csv')
data_list$country_scale_consumption = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_total_country_scale_consumption.csv')
data_list$country_scale_production = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/direct_total_country_scale_production.csv')
data_list$homogenised_global = read.csv('~/Github/mrio_bio_satellite/footprint_outputs/homogenised_global_finalsale_level.csv')
data_list$country_group = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/country_groups_updated.csv')
data_list$country_GDP = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/GDP_per_country.csv')
data_list$un_iso_codes = read.csv('~/Github/mrio_bio_satellite/iucn_input_data/un_iso_codes.csv')
footprint_countries = unique(unlist(as.vector(data_list$consumption_finalsale_production[, 1:3])))
data_list$footprint_countries = data.frame(country_name = footprint_countries,
country_index = match(footprint_countries, data_list$un_iso_codes$UN.Country.Name))
countries_to_exclude = data_list$un_iso_codes$UN.Country.Name[unique(c(data_list$country_scale_production$country[which(data_list$country_scale_production$gross_global < country_exclusion_discriminator)],
data_list$country_scale_consumption$country[which(data_list$country_scale_consumption$gross_global < country_exclusion_discriminator)]))]
country_groups = setNames(lapply(seq_along(data_list$country_group), function(i) as.character(data_list$country_group[, i])), names(data_list$country_group))
country_groups = setNames(lapply(seq_along(country_groups), function(i) country_groups[[i]][which(country_groups[[i]] != "")]), names(country_groups))
set_to_modify = which(!(names(country_groups) %in% c('G5', 'G7', 'G20', 'G20_EU')))
country_groups[set_to_modify] = lapply(set_to_modify, function(i) setdiff(country_groups[[i]], c(country_groups$G20, country_groups$G20_EU)))
country_groups$G20  = setdiff(country_groups$G20, c(country_groups$G5, country_groups$G7))
sorted_country_GDP = data_list$country_GDP[order(data_list$country_GDP$GDP, decreasing = TRUE), ]
country_groups = setNames(lapply(seq_along(country_groups), function(i) country_groups[[i]][which((country_groups[[i]] %in% sorted_country_GDP$Country))]), names(country_groups))  #select countries that match data
country_groups = setNames(lapply(seq_along(country_groups), function(i) sorted_country_GDP$Country[sort(match(country_groups[[i]], sorted_country_GDP$Country), decreasing = FALSE)]), names(country_groups))
country_groups_indexes = setNames(lapply(seq_along(country_groups), function(i) match(country_groups[[i]], data_list$footprint_countries$country_name)), names(country_groups))
country_group_order = match(country_group_colour$country_group, names(country_groups))
country_group_order = country_group_order[!(is.na(country_group_order))]
country_groups_df = setNames(lapply(country_group_order, function(i) data.frame(country_name = data_list$footprint_countries$country_name[country_groups_indexes[[i]]],
country_index = data_list$footprint_countries$country_index[country_groups_indexes[[i]]],
country_group = rep(names(country_groups_indexes)[i], length(country_groups_indexes[[i]])))),
country_group_colour$country_group)
country_groups_list = do.call(rbind, country_groups_df)
country_groups_list$country_colour = country_group_colour$country_colour[ match(country_groups_list$country_group, country_group_colour$country_group)]
#countries_to_exclude = c(setdiff(footprint_countries, country_groups_list$country_name))
consumption_finalsale_production_to_use = data_list$consumption_finalsale_production
paths_to_exclude = unlist(lapply(which(names(consumption_finalsale_production_to_use) %in% c("consumption_country", "finalsale_country", "production_country")),
function(i) which(consumption_finalsale_production_to_use[, i] %in% countries_to_exclude)))
if (length(paths_to_exclude) > 0){
consumption_finalsale_production_to_use = consumption_finalsale_production_to_use[-paths_to_exclude, ]
}
consumption_finalsale_production_to_use$country_colour = country_groups_list$country_colour[match(consumption_finalsale_production_to_use$production_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$production_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$production_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$finalsale_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$finalsale_country, country_groups_list$country_name)]
consumption_finalsale_production_to_use$consumption_country_group = country_groups_list$country_group[match(consumption_finalsale_production_to_use$consumption_country, country_groups_list$country_name)]
collapsed_set = consumption_finalsale_production_to_use
group_to_aggregate = match(setdiff(names(collapsed_set), c('production_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
group_to_aggregate = match(setdiff(names(collapsed_set), c('finalsale_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
group_to_aggregate = match(setdiff(names(collapsed_set), c('consumption_country', 'threat_intensity')), names(collapsed_set))
collapsed_set = setNames(aggregate(collapsed_set$threat_intensity, by = as.list(collapsed_set[, group_to_aggregate]), FUN = sum),
c(names(collapsed_set)[group_to_aggregate], 'threat_intensity'))
production_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'production_country_group')]), FUN = sum)
production_aggregates$frac = production_aggregates$x/sum(production_aggregates$x) * 100
consumption_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'consumption_country_group')]), FUN = sum)
consumption_aggregates$frac = consumption_aggregates$x/sum(consumption_aggregates$x) * 100
dd <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .95))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
dd <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = which(dd$threat_intensity > quantile(dd$threat_intensity, .99))
dd <- dd[data_to_show, ]
alluvial::alluvial( select(dd, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=dd$threat_intensity,
border=NA,
blocks = TRUE,
col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
country_sorted_data <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = country_sorted_data[which(dd$threat_intensity > quantile(dd$threat_intensity, .99)), ]
alluvial::alluvial( select(data_to_show, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=data_to_show$threat_intensity,
border=NA,
blocks = TRUE,
col = data_to_show$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
country_sorted_data <- consumption_finalsale_production_to_use %>%
mutate(
production_f = factor(production_country, levels = rev(country_groups_list$country_name)),
finalsale_f = factor(finalsale_country, levels = rev(country_groups_list$country_name)),
consumption_f = factor(consumption_country, levels = rev(country_groups_list$country_name))
)
data_to_show = country_sorted_data[which(country_sorted_data$threat_intensity > quantile(country_sorted_data$threat_intensity, .99)), ]
alluvial::alluvial( select(data_to_show, "production_f", "finalsale_f", "consumption_f"),
#hide = dd$threat_intensity < quantile(dd$threat_intensity, .99),
freq=data_to_show$threat_intensity,
border=NA,
blocks = TRUE,
col = data_to_show$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
global_homogenised = data_list$homogenised_global
global_homogenised = global_homogenised[global_homogenised$threat_intensity > quantile(global_homogenised$threat_intensity, .9), ]
alluvial::alluvial( select(global_homogenised, "production_industry", "finalsale_industry"),
#                    hide = global_homogenised$threat_intensity < quantile(global_homogenised$threat_intensity, .9),
freq=global_homogenised$threat_intensity,
border=NA,
blocks = TRUE,
#                    col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
data_to_use = data_to_use[, match(c('finalsale_industry', 'production_industry', 'threat_intensity'), names(data_to_use))]
group_to_aggregate = match(setdiff(names(data_to_use), c('finalsale_industry', 'threat_intensity')), names(data_to_use))
direct_impacts_list = setNames(aggregate(data_to_use$threat_intensity,
by = list(data_to_use[, group_to_aggregate]),
FUN = sum),
c(names(data_to_use)[group_to_aggregate], 'threat_intensity'))
direct_impacts_list = direct_impacts_list[order(direct_impacts_list$threat_intensity, decreasing = TRUE), ]
direct_impacts_list$impact_fraction = direct_impacts_list$threat_intensity/sum(direct_impacts_list$threat_intensity)
direct_impacts_list
global_homogenised = data_list$homogenised_global
global_homogenised = global_homogenised[global_homogenised$threat_intensity > quantile(global_homogenised$threat_intensity, .99), ]
alluvial::alluvial( select(global_homogenised, "production_industry", "finalsale_industry"),
#                    hide = global_homogenised$threat_intensity < quantile(global_homogenised$threat_intensity, .9),
freq=global_homogenised$threat_intensity,
border=NA,
blocks = TRUE,
#                    col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
global_homogenised = data_list$homogenised_global
global_homogenised = global_homogenised[global_homogenised$threat_intensity > quantile(global_homogenised$threat_intensity, .95), ]
alluvial::alluvial( select(global_homogenised, "production_industry", "finalsale_industry"),
#                    hide = global_homogenised$threat_intensity < quantile(global_homogenised$threat_intensity, .9),
freq=global_homogenised$threat_intensity,
border=NA,
blocks = TRUE,
#                    col = dd$country_colour,
alpha = 0.9,
xw = 0.1,
gap.width = 0.2,
cex = 0.5)
data_to_use = data_to_use[, match(c('finalsale_industry', 'production_industry', 'threat_intensity'), names(data_to_use))]
group_to_aggregate = match(setdiff(names(data_to_use), c('finalsale_industry', 'threat_intensity')), names(data_to_use))
direct_impacts_list = setNames(aggregate(data_to_use$threat_intensity,
by = list(data_to_use[, group_to_aggregate]),
FUN = sum),
c(names(data_to_use)[group_to_aggregate], 'threat_intensity'))
direct_impacts_list = direct_impacts_list[order(direct_impacts_list$threat_intensity, decreasing = TRUE), ]
direct_impacts_list$impact_fraction = direct_impacts_list$threat_intensity/sum(direct_impacts_list$threat_intensity)
direct_impacts_list
production_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'production_country_group')]), FUN = sum)
production_aggregates$frac = production_aggregates$x/sum(production_aggregates$x) * 100
consumption_aggregates = aggregate(collapsed_set$threat_intensity, by = list(collapsed_set[, which(names(collapsed_set) %in% 'consumption_country_group')]), FUN = sum)
consumption_aggregates$frac = consumption_aggregates$x/sum(consumption_aggregates$x) * 100
production_aggregates
